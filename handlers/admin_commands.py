# handlers/admin_commands.py
"""–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from database import get_sessionmaker, crud
from sqlalchemy.ext.asyncio import AsyncSession

router = Router()
logger = logging.getLogger(__name__)

# --- –ö–æ–º–∞–Ω–¥–∞ /add_admin ---
@router.message(Command("add_admin"))
async def cmd_add_admin(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è> @username [@username2 ...]
    """
    logger.info(f"Received /add_admin command from user {message.from_user.id}")

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_admin <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è> @username [@username2 ...]`\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_admin –ú–æ–π–¢—É—Ä–Ω–∏—Ä @newadmin @anotheradmin`",
            parse_mode='Markdown'
        )
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ - –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
    parts = args[1].split()
    if len(parts) < 2:
         await message.reply(
            "–ü–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω @username –∞–¥–º–∏–Ω–∞."
        )
         return

    competition_name = parts[0]
    usernames_to_add = [u for u in parts[1:] if u.startswith('@')]

    if not usernames_to_add:
        await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ @username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    AsyncSessionLocal = get_sessionmaker()
    async with AsyncSessionLocal() as db:
        try:
            # 1. –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            competition = await crud.get_competition_by_name(db, competition_name)
            if not competition:
                await message.reply(f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{competition_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
            sender_db_user = await crud.get_user_by_id(db, message.from_user.id)
            if not sender_db_user or not (
                sender_db_user.id == competition.creator_id
            ):
                await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
                return

            # 3. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —é–∑–µ—Ä–Ω–µ–π–º–∞–º –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∞–¥–º–∏–Ω—ã
            errors = []
            added_admins = []
            admins_list = list(competition.admins or []) # <-- admins_list —ç—Ç–æ –ø–∏—Ç–æ–Ω–æ–≤—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ JSON
            
            for username in usernames_to_add:
                clean_username = username.lstrip('@')
                if not clean_username:
                    errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º: {username}")
                    continue

                db_user = await crud.get_user_by_username(db, clean_username)
                if not db_user:
                    errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.")
                    continue

                if db_user.id == competition.creator_id:
                    errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
                    continue

                # --- –ü–†–û–ë–õ–ï–ú–ê 1: –°–†–ê–í–ù–ï–ù–ò–ï INT –° –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò –°–ü–ò–°–ö–ê ---
                # –ï—Å–ª–∏ admins_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–∏, —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
                # –ù–æ SQLAlchemy –æ–±—ã—á–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç JSON –º–∞—Å—Å–∏–≤ int –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
                # –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user_id={db_user.id}, admins_list={admins_list}, type(admins_list)={type(admins_list)}")
                if db_user.id in admins_list:
                    errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                    continue
                # ----------------------------------------------------

                admins_list.append(db_user.id) # <-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ int
                added_admins.append(f"@{clean_username}")
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.")

            # 4. –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î
            logger.debug(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {admins_list}")
            if added_admins:
                competition.admins = admins_list # <-- –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ int
                logger.debug(f"competition.admins —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {competition.admins}")
                await db.commit() # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º
                logger.debug("Commit –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
                await db.refresh(competition) # <-- –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
                logger.debug("Refresh –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
                success_msg = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã {', '.join(added_admins)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ '{competition.name}'."
                if errors:
                    success_msg += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n" + "\n".join(errors)
                await message.reply(success_msg)
            elif errors:
                await message.reply("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n" + "\n".join(errors))
            else:
                await message.reply("–ù–µ—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å. –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∞–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /add_admin: {e}", exc_info=True)
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /top ---
@router.message(F.text.startswith("—Ç–æ–ø"))
async def cmd_top(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ç–æ–ø <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è> [N]
    –ì–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30).
    """
    logger.info(f"Received —Ç–æ–ø command from user {message.from_user.id}")
    
    args = message.text.split(maxsplit=2) # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º
    if len(args) < 2:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/top <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è> [N]`\n"
            "–ì–¥–µ `N` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30).\n"
            "–ü—Ä–∏–º–µ—Ä: `/top –ú–æ–π–¢—É—Ä–Ω–∏—Ä` –∏–ª–∏ `/top –ú–æ–π–¢—É—Ä–Ω–∏—Ä 10`",
            parse_mode='Markdown'
        )
        return

    competition_name = args[1]
    top_n = 30
    if len(args) > 2:
        try:
            top_n = int(args[2])
            if top_n <= 0:
                raise ValueError("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–æ–ø–∞.")
            return

    AsyncSessionLocal = get_sessionmaker()
    async with AsyncSessionLocal() as db:
        try:
            # 1. –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            competition = await crud.get_competition_by_name(db, competition_name)
            if not competition:
                await message.reply(f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{competition_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ MMR (—É–±—ã–≤–∞–Ω–∏–µ)
            players = await crud.get_competition_players(db, competition.id)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            players_to_show = players[:top_n] if top_n > 0 else players

            if not players_to_show:
                await message.reply(f"–í —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ '{competition.name}' –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
                return

            sorted_ranks_config = sorted(
                competition.ranks or [], 
                key=lambda r: r.get('mmr_threshold', 0), 
                reverse=True
            )

            def get_rank_name(mmr: int) -> str:
                """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ MMR."""
                for rank_config in sorted_ranks_config:
                    if mmr >= rank_config.get('mmr_threshold', 0):
                        return rank_config.get('name', '–ë–µ–∑ —Ä–∞–Ω–≥–∞')
                return '–ë–µ–∑ —Ä–∞–Ω–≥–∞'

            report_lines = [f"üèÜ <b>–¢–æ–ø {len(players_to_show)} –∏–≥—Ä–æ–∫–æ–≤</b> –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ '<i>{competition.name}</i>':"]
            for i, player in enumerate(players_to_show, start=1):
                user = player.user
                username = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                mmr = player.mmr
                rank_name = get_rank_name(mmr)
                player_id = player.id 
                
                report_lines.append(f"{i}. {username}, MMR: {mmr}, –†–∞–Ω–≥: {rank_name}, ID: {player_id}")

            await message.reply("\n".join(report_lines), parse_mode='HTML')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /top: {e}", exc_info=True)
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
